{"version":3,"sources":["components/Feedback/Feedback.module.css","components/Feedback/Section.js","components/Feedback/Statistics.js","components/Feedback/Buttons.js","components/Feedback/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","Statistics","options","total","positivePercentage","Object","keys","map","feedbackRate","Buttons","event","className","s","buttons","option","onClick","Notification","msg","Feedback","useState","grades","reduce","grade","text","parseInt","raiting","setRaiting","countTotalFeedback","values","acc","value","e","target","innerText","Math","round","good","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,QAAU,0BAA0B,KAAO,uBAAuB,IAAM,sBAAsB,QAAU,4B,kUCa3GC,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCoBUC,EAvBI,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACpC,OACE,gCACGC,OAAOC,KAAKJ,GAASK,KAAI,SAAAC,GAAY,OACpC,8BACGA,EADH,KACmBN,EAAQM,KADnBA,MAKV,wCAAWL,KACX,oDAAuBC,EAAvB,W,gBCSSK,EAjBC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOR,EAAc,EAAdA,QACxB,OACE,qBAAKS,UAAWC,IAAEC,QAAlB,SACGX,EAAQK,KAAI,SAAAO,GAAM,OACjB,wBAAqBH,UAAWC,IAAEE,GAASC,QAASL,EAApD,SACGI,GADUA,SCANE,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OAAa,4BAAIA,KCuDvBC,MAhDf,WAAqB,IAAD,EACYC,oBAAS,kBACrCC,EAAOC,QACL,SAACnB,EAASoB,GAAV,mBAAC,eACIpB,GADL,kBAEGoB,EAAMC,KAAOC,SAASF,EAAMG,aAE/B,OAPc,mBACXA,EADW,KACFC,EADE,KAkBZC,EAAqB,WACzB,OAAOtB,OAAOuB,OAAOH,GAASJ,QAAO,SAACQ,EAAKC,GAAN,OAAgBD,EAAMC,MAS7D,OACE,gCACE,cAAC,EAAD,CAAS/B,MAAO,wBAAhB,SACE,cAAC,EAAD,CAASW,MApBQ,SAAAqB,GACrBL,EAAW,2BACND,GADK,kBAEPM,EAAEC,OAAOC,UAAYR,EAAQM,EAAEC,OAAOC,WAAa,MAiBlB/B,QAASG,OAAOC,KAAKmB,OAEvD,cAAC,EAAD,CAAS1B,MAAO,aAAhB,SACG4B,IACC,cAAC,EAAD,CACEzB,QAASuB,EACTtB,MAAOwB,IACPvB,mBAdC8B,KAAKC,MAAMV,EAAQW,MAAQT,IAAuB,OAClC,IAgBnB,cAAC,EAAD,CAAcV,IAAI,4BCvCboB,MARf,WACE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAAC,EAAD,OCMS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.968326c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Feedback_buttons__hvIOw\",\"good\":\"Feedback_good__Hq0Ue\",\"bad\":\"Feedback_bad__sIb7t\",\"neutral\":\"Feedback_neutral__1hPpL\"};","import PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ options, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      {Object.keys(options).map(feedbackRate => (\r\n        <p key={feedbackRate}>\r\n          {feedbackRate}: {options[feedbackRate]}\r\n        </p>\r\n      ))}\r\n\r\n      <p>Total: {total}</p>\r\n      <p>Positive feedback: {positivePercentage}%</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  options: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport s from './Feedback.module.css';\r\n\r\nconst Buttons = ({ event, options }) => {\r\n  return (\r\n    <div className={s.buttons}>\r\n      {options.map(option => (\r\n        <button key={option} className={s[option]} onClick={event}>\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nButtons.propTypes = {\r\n  event: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Buttons;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ msg }) => <p>{msg}</p>;\r\n\r\nNotification.propTypes = {\r\n  msg: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState } from 'react';\r\n\r\nimport grades from './grades.json';\r\n\r\nimport Section from './Section';\r\nimport Statistics from './Statistics';\r\nimport Buttons from './Buttons';\r\nimport Notification from './Notification';\r\n\r\nfunction Feedback() {\r\n  const [raiting, setRaiting] = useState(() =>\r\n    grades.reduce(\r\n      (options, grade) => ({\r\n        ...options,\r\n        [grade.text]: parseInt(grade.raiting),\r\n      }),\r\n      {},\r\n    ),\r\n  );\r\n\r\n  const addRatingEvent = e => {\r\n    setRaiting({\r\n      ...raiting,\r\n      [e.target.innerText]: raiting[e.target.innerText] + 1,\r\n    });\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return Object.values(raiting).reduce((acc, value) => acc + value);\r\n  };\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    let result = null;\r\n    result = Math.round(raiting.good / (countTotalFeedback() / 100));\r\n    return result ? result : 0;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Section title={'Please leave feedback'}>\r\n        <Buttons event={addRatingEvent} options={Object.keys(raiting)} />\r\n      </Section>\r\n      <Section title={'Statistics'}>\r\n        {countTotalFeedback() ? (\r\n          <Statistics\r\n            options={raiting}\r\n            total={countTotalFeedback()}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <Notification msg=\"No feedback given\" />\r\n        )}\r\n      </Section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feedback;\r\n","import './App.css';\r\nimport Feedback from './components/Feedback';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Feedback />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}